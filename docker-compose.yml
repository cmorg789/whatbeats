services:
  traefik:
    image: traefik
    container_name: whatbeats-traefik
    ports:
      - "80:80"
      - "443:443"
    # depends_on: # Optional, can often be removed
    #   - frontend
    #   - backend
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - SSL_EMAIL=${SSL_EMAIL:-admin@example.com}
      - ENABLE_SSL=${ENABLE_SSL:-false}
    command:
      - "--api.dashboard=true" # API is enabled by default, this enables the dashboard part
      # Entry points configuration
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      # Providers configuration
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=whatbeats-network"
      # Let's Encrypt configuration
      - "--certificatesresolvers.letsencrypt.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web"
      # Log configuration
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--accesslog.filepath=/var/log/traefik/access.log"
      - "--accesslog.bufferingsize=100"
      # - "--api.insecure=true" # ONLY for local dev if you absolutely need http access to API/dashboard and understand risks
                                # Better to configure a router for the dashboard as below.
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_certs:/etc/traefik/acme
    restart: unless-stopped
    networks:
      - whatbeats-network # Ensure this network is defined elsewhere
    labels:
      - "traefik.enable=true"

      # Router for Traefik Dashboard (adjust Host rule as needed)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=letsencrypt"
      # Example: Apply security headers and basic auth (define traefik-auth middleware below or elsewhere)
      # - "traefik.http.routers.traefik-dashboard.middlewares=traefik-auth@docker,security-headers@docker"
      - "traefik.http.routers.traefik-dashboard.middlewares=security-headers@docker" # Apply security headers

      # Basic Auth Middleware Definition (generate user:hashed_password, e.g. with htpasswd)
      # - "traefik.http.middlewares.traefik-auth.basicauth.users=admin:$$apr1$$......"

      # Security headers middleware definition
      - "traefik.http.middlewares.security-headers.headers.customFrameOptionsValue=SAMEORIGIN" # Or .frameDeny=true
      - "traefik.http.middlewares.security-headers.headers.contentTypeNosniff=true"
      - "traefik.http.middlewares.security-headers.headers.referrerPolicy=same-origin"
      - "traefik.http.middlewares.security-headers.headers.stsSeconds=31536000"
      - "traefik.http.middlewares.security-headers.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.security-headers.headers.stsPreload=true" # Be sure before enabling preload


  # MongoDB database
  mongodb:
    image: mongo
    container_name: whatbeats-mongodb
    # No need to expose MongoDB port to host anymore
    # ports:
    #   - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    restart: unless-stopped
    networks:
      - whatbeats-network

  # Backend API service
  backend:
    build:
      context: ..
      dockerfile: whatbeats/Dockerfile
      target: backend-stage
    container_name: whatbeats-backend
    # No need to expose backend port to host anymore
    # ports:
    #   - "8000:8000"
    expose:
      - "8000"
    depends_on:
      - mongodb
    environment:
      - MONGODB_URI=mongodb://mongodb:27017
      - MONGODB_DB=whatbeats
      - ENABLE_CORS=false  # CORS is handled by Traefik
      # Required environment variables - must be set in .env file or uncommented here
      # - JWT_SECRET_KEY=your_jwt_secret
      # - ADMIN_PASSWORD_HASH=your_admin_password_hash
      # - LLM_API_KEY=your_llm_api_key
    volumes:
      - ./.env:/app/.env:ro  # Mount .env file from host
    restart: unless-stopped
    networks:
      - whatbeats-network
    command: ["python", "/app/backend/run.py"]
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.backend.entrypoints=web"
      - "traefik.http.routers.backend.service=backend-service"
      # Apply middleware for HTTP to HTTPS redirect if SSL is enabled
      - "traefik.http.routers.backend.middlewares=redirect-to-https@docker"
      # HTTPS router
      - "traefik.http.routers.backend-secure.rule=Host(`${DOMAIN:-localhost}`) && PathPrefix(`/api/`)"
      - "traefik.http.routers.backend-secure.entrypoints=websecure"
      - "traefik.http.routers.backend-secure.service=backend-service"
      - "traefik.http.routers.backend-secure.tls=true"
      - "traefik.http.routers.backend-secure.tls.certresolver=letsencrypt"
      # Service definition
      - "traefik.http.services.backend-service.loadbalancer.server.port=8000"

  # Frontend service
  frontend:
    build:
      context: ..
      dockerfile: whatbeats/Dockerfile
      target: frontend-stage
    container_name: whatbeats-frontend
    # No need to expose frontend port to host anymore
    # ports:
    #   - "3000:3000"
    expose:
      - "3000"
    environment:
      - DOMAIN=${DOMAIN:-localhost}  # Use DOMAIN env var for API URL
    volumes:
      - ./.env:/app/.env:ro  # Mount .env file from host
    restart: unless-stopped
    networks:
      - whatbeats-network
    command: ["node", "/app/frontend/server.js"]
    labels:
      - "traefik.enable=true"
      # HTTP router
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend.service=frontend-service"
      # Apply middleware for HTTP to HTTPS redirect if SSL is enabled
      - "traefik.http.routers.frontend.middlewares=redirect-to-https@docker"
      # HTTPS router
      - "traefik.http.routers.frontend-secure.rule=Host(`${DOMAIN:-localhost}`)"
      - "traefik.http.routers.frontend-secure.entrypoints=websecure"
      - "traefik.http.routers.frontend-secure.service=frontend-service"
      - "traefik.http.routers.frontend-secure.tls=true"
      - "traefik.http.routers.frontend-secure.tls.certresolver=letsencrypt"
      # Service definition
      - "traefik.http.services.frontend-service.loadbalancer.server.port=3000"

volumes:
  mongodb_data:
    name: whatbeats-mongodb-data
  traefik_certs:
    name: whatbeats-traefik-certs

networks:
  whatbeats-network:
    name: whatbeats-network
    driver: bridge

