# Nginx configuration for whatbeats application
# Handles routing and CORS for both frontend and backend services

user  nginx;
worker_processes  auto;
error_log  /dev/stdout warn;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log  /dev/stdout  main;
    
    sendfile        on;
    keepalive_timeout  65;
    
    # Map directive for HSTS header (moved from security_headers.conf)
    map $scheme $hsts_header {
        https "max-age=31536000; includeSubDomains";
        default "";
    }
    
    # Map directive for CORS origin validation (moved from cors_headers.conf)
    map $http_origin $cors_allow_origin {
        default "";
        "~^https?://localhost(:[0-9]+)?$" "$http_origin";
        "~^https?://127\.0\.0\.1(:[0-9]+)?$" "$http_origin";
        "http://localhost:8000" "$http_origin";
        # Add your production domains here
        # You can add more domains as needed
    }
    
    # Compression settings
    gzip  on;
    gzip_disable "msie6";
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_buffers 16 8k;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
    
    # HTTP server configuration
    server {
        listen 80;
        server_name ${DOMAIN} localhost;
        
        # For Let's Encrypt certificate validation
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Include security headers
        include /etc/nginx/snippets/security_headers.conf;
        
        # HTTP-only server block or redirect to HTTPS
        ${HTTP_SERVER_CONTENT}
    }
    
    # HTTPS server configuration - only included when SSL is enabled
    ${HTTPS_SERVER_BLOCK}
}